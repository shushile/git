一、
初始化一个Git仓库：git init

添加文件到Git仓库：
1：git add 文件，可以添加多次；

2：git commit -m ‘说明注释’。--作用可以看到自己每次的版本具体修改情况

二、
常见命令
git status 查看仓库工作区状态，文件有无被修改过.
git diff <‘flie’> 查看版本更改内容.

三、
版本回退
1：git log 查看历史记录.
2：git log --pretty=oneline 查看历史纪录，不用看的眼花缭乱.
3：git reset --hard head^ 返回上一个版本（上上个版本是head^^,当然往上100个版本写100个^比较容易数不过来，所以写成head~100）.
4: git reset --hard commit id 只要上面的命令行窗口还没有被关掉，你就可以顺着往上找到指定回到未来的某个版本.
5:git reflog 记录你的每一次命令，找不到commit id也不用慌，用这个command.

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

四、
1.git checkout -- file 当你改乱了工作区某个文件内容，想直接丢弃工作区得修改时，用这个command。
2.git reset head file 当你把改乱了的文件添加到暂存区时，想丢弃修改，首先要分2步走，第一步是先使用这个command 把暂存区的文件退回给工作区，第二步使用 git checkout -- file 丢弃工作区的修改。
3.已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

五、
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

六、
1、要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

2、关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

3、此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

4、分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

七、
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
语法：git clone 地址；
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

八、
Git鼓励大量使用分支：

查看分支：git branch    带有*号的为当前分支

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

九、
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

用git log --graph --pretty=oneline --abbrev-commit命令可以看到分支合并图。

十、
1.git merge --no-ff -m "记录" 分支名称     合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
2.在实际开发中，我们应该按照几个基本原则进行分支管理：

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

十一、
1.git stash        Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
2.git stash list     查看储藏后的工作现场
3.Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了
4.再用git stash list查看，就看不到任何stash内容了

十二、
1.如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

十三、
查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream-to=origin/<branch> dev；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

十四、
git pull 地址      从版本库里更新本地代码
